use crate::{models::ProductGroup, ports::Repository};

/// Represents a demand entity in the flow trading system.
///
/// A demand captures a bidder's interest in acquiring products through the system.
/// Each demand is owned by a single bidder and can optionally include:
/// - A demand curve that defines pricing preferences
/// - A portfolio group that links this demand to one or more portfolios
#[cfg_attr(
    feature = "schemars",
    derive(schemars::JsonSchema),
    schemars(
        rename = "ProductRecord",
        bound = "
            T::ProductId: schemars::JsonSchema,
            AppData: schemars::JsonSchema
        "
    )
)]
#[cfg_attr(
    feature = "serde",
    derive(serde::Serialize),
    serde(bound(serialize = "
        T::ProductId: serde::Serialize + Clone,
        AppData: serde::Serialize
    "))
)]
pub struct ProductRecord<T: Repository, AppData> {
    /// Unique identifier for this product instance.
    /// Generated by the application when creating a new product.
    pub id: T::ProductId,

    /// Application-specific data attached to this product.
    /// This field allows extending the product with custom data without
    /// modifying the core schema.
    pub app_data: AppData,

    /// Optional parent child of the product
    pub parent: Option<(T::ProductId, f64)>,

    /// Each product at any given time is either a basis element
    /// or can be represented in terms of a finer basis.
    pub basis: ProductGroup<T::ProductId>,
}
