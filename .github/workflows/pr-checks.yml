name: PR Checks
on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  check-sqlx-offline-mode:
    runs-on: ubuntu-latest
    name: Check SQLx Offline Queries
    env:
      # absolute path works better
      # https://github.com/launchbadge/sqlx/issues/3099
      DATABASE_URL: "sqlite:/tmp/dev.db"
    outputs:
      sqlx-cache-outdated: ${{ steps.sqlx-check.outputs.cache-outdated }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          # this can use its own cache - it is quite independent
          workspaces: |
            fts-sqlite
      - name: Prepare SQLx database bindings
        working-directory: fts-sqlite
        run: |
          cargo install sqlx-cli --no-default-features --features sqlite
          cargo sqlx database create
          cargo sqlx migrate run --source ./schema/
      - name: Check SQLx cache
        id: sqlx-check
        working-directory: fts-sqlite
        run: |
          if ! cargo sqlx prepare --check; then
            echo "cache-outdated=true" >> $GITHUB_OUTPUT
            echo "SQLx cache is outdated, generating updated cache..."
            cargo sqlx prepare
            echo "‚ùå SQLx cache was outdated. Updated cache generated for auto-PR creation."
            echo "::error::SQLx offline query cache is outdated. An update PR will be created automatically."
          else
            echo "cache-outdated=false" >> $GITHUB_OUTPUT
            echo "‚úÖ SQLx cache is up to date"
          fi
      - name: Fail if cache was outdated
        if: steps.sqlx-check.outputs.cache-outdated == 'true'
        run: |
          echo "Failing this job because SQLx cache was outdated."
          echo "Check for an automatically created PR with cache updates."
          exit 1
      - name: Upload updated SQLx cache
        if: steps.sqlx-check.outputs.cache-outdated == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: updated-sqlx-cache
          path: fts-sqlite/.sqlx/
          retention-days: 1

  create-sqlx-update-pr:
    needs: check-sqlx-offline-mode
    if: needs.check-sqlx-offline-mode.outputs.sqlx-cache-outdated == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: ${{ github.head_ref }}
      - name: Download updated SQLx cache
        uses: actions/download-artifact@v4
        with:
          name: updated-sqlx-cache
          path: fts-sqlite/.sqlx/
      - name: Create update branch and PR
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Get current branch info
          SOURCE_BRANCH="${{ github.head_ref }}"
          UPDATE_BRANCH="sqlx-cache-update/${SOURCE_BRANCH}"
          ORIGINAL_AUTHOR="${{ github.event.pull_request.user.login }}"

          echo "Source branch: $SOURCE_BRANCH"
          echo "Update branch: $UPDATE_BRANCH"
          echo "Original PR author: $ORIGINAL_AUTHOR"

          # Close existing update PR if it exists (before deleting branch)
          gh pr close "${UPDATE_BRANCH}" || true

          # Check if update branch already exists and delete it
          if git ls-remote --exit-code origin "refs/heads/${UPDATE_BRANCH}"; then
            echo "Deleting existing update branch..."
            git push origin --delete "${UPDATE_BRANCH}" || true
          fi

          # Create and switch to new branch from current HEAD
          git checkout -b "${UPDATE_BRANCH}"

          # Add the updated cache files
          git add fts-sqlite/.sqlx/

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit - SQLx cache is already up to date"
            exit 0
          fi

          # Commit changes
          git commit -m "Update SQLx cache for PR #${{ github.event.number }}

          This PR updates the SQLx offline query cache that was outdated in PR #${{ github.event.number }}.

          Auto-generated by GitHub Actions."

          # Push the branch
          git push origin "${UPDATE_BRANCH}"

          # Create PR using GitHub CLI with original author as reviewer
          gh pr create \
            --base "${SOURCE_BRANCH}" \
            --head "${UPDATE_BRANCH}" \
            --title "Update SQLx cache for PR #${{ github.event.number }}" \
            --label "sqlx-cache-update" \
            --reviewer "${ORIGINAL_AUTHOR}" \
            --body "This PR updates the SQLx offline query cache that was outdated in PR #${{ github.event.number }} by @${ORIGINAL_AUTHOR}.

          **Changes:**
          - Updated SQLx offline query cache files in \`fts-sqlite/.sqlx/\`

          **Next steps:**
          1. @${ORIGINAL_AUTHOR} please review the changes
          2. Merge this PR into your branch
          3. The original PR checks should then pass

          Auto-generated by GitHub Actions."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  fail-on-outdated-cache:
    needs: check-sqlx-offline-mode
    if: needs.check-sqlx-offline-mode.outputs.sqlx-cache-outdated == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Fail due to outdated SQLx cache
        run: |
          echo "‚ùå SQLx offline query cache is outdated!"
          echo "üìù A PR with updated cache files has been automatically created."
          echo "üîÑ Please merge the cache update PR and re-run these checks."
          exit 1

  tests-and-validate:
    needs:
      - check-sqlx-offline-mode
    if: needs.check-sqlx-offline-mode.outputs.sqlx-cache-outdated == 'false'
    runs-on: ubuntu-latest
    name: Tests and Validations
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: "true"
          shared-key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        run: cargo build --release --locked
      - name: Run tests
        run: cargo test --release --locked
      - name: Check formatting
        run: cargo fmt --check
      - name: Generate OpenAPI Spec
        run: cargo run --bin ftdemo --release -- schema --output openapi.json
      # https://github.com/swagger-api/apidom is the modern way of validating OpenAPI specs
      # https://github.com/swaggerexpert/apidom-validate is a simple way of doing so via GitHub Action.
      # However, it builds every time, so it's not ideal;
      # we can either optimize this with caching or do it directly as a nodejs script.
      - uses: swaggerexpert/apidom-validate@v1
        with:
          definition-file: "openapi.json"
