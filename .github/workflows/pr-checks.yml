name: PR Checks
on:
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  check-sqlx-offline-mode:
    runs-on: ubuntu-latest
    name: Check SQLx Offline Queries
    env:
      # absolute path works better
      # https://github.com/launchbadge/sqlx/issues/3099
      DATABASE_URL: "sqlite:/tmp/dev.db"
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          # this can use its own cache - it is quite independent
          workspaces: |
            fts-sqlite
      - name: Prepare SQLx
        working-directory: fts-sqlite
        run: |
          cargo install sqlx-cli --no-default-features --features sqlite
          cargo sqlx database create
          cargo sqlx migrate run --source ./schema/
      - name: Check SQLx cache
        working-directory: fts-sqlite
        run: |
          if ! cargo sqlx prepare --check; then
            echo "‚ùå SQLx offline query cache is outdated!"
            echo ""
            echo "This happens when SQL queries are added or modified."
            echo "To fix this, run locally:"
            echo "  `make prepare-sqlx`"
            echo ""
            echo "Then commit and push the updated fts-sqlite/.sqlx/* files."
            exit 1
          fi

  tests-and-validate:
    needs:
      - check-sqlx-offline-mode
    runs-on: ubuntu-latest
    name: Tests and Validations
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
        with:
          save-if: "true"
          shared-key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build
        run: cargo build --release --locked
      - name: Run tests
        run: cargo test --release --locked
      - name: Check formatting
        run: cargo fmt --check
      - name: Generate OpenAPI Spec
        run: cargo run --bin ftdemo --release -- schema --output openapi.json
      # https://github.com/swagger-api/apidom is the modern way of validating OpenAPI specs
      # https://github.com/swaggerexpert/apidom-validate is a simple way of doing so via GitHub Action.
      # However, it builds every time, so it's not ideal;
      # we can either optimize this with caching or do it directly as a nodejs script.
      - uses: swaggerexpert/apidom-validate@v1
        with:
          definition-file: "openapi.json"
